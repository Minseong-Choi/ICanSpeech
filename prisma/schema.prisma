// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

// --- NextAuth.js Models ---
// These models are required for the NextAuth.js MongoDB a dapter.

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials provider (manual login)
  
  accounts      Account[]
  sessions      Session[]
  
  // Application-specific relations
  practices     Practice[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


// --- Application-Specific Models ---

model Practice {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  type        String   // e.g., "interview" or "presentation"
  materials   Json?    // For scripts, URLs, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation to User
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relation to Recordings
  recordings Recording[]
}

model Recording {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  videoUrl   String?
  feedback   Json?
  createdAt  DateTime @default(now())

  // Relation to Practice
  practiceId String   @db.ObjectId
  practice   Practice @relation(fields: [practiceId], references: [id], onDelete: Cascade)
}
